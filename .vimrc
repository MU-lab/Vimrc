"" 無題のファイルをfiletype=text扱い"syntax onset filetype=text" filetype off" filetype plugin indent off""""""""""""""""""""""""NeoBundle設定""""""""""""""""""""""if has('vim_starting')    set nocompatible    set runtimepath+=~/.vim/bundle/neobundle.vim/endifcall neobundle#begin(expand('~/.vim/bundle'))NeoBundleFetch 'Shougo/neobundle.vim'" NeoBundle で管理するプラグインを追加します。NeoBundleLazy 'Shougo/unite.vim.git',{            \ "autoload": {            \ "commands": ["Unite", "UniteWithBufferDir"]            \}}" Unit.vimの設定" 入力モードで開始するlet g:unite_enable_start_insert=1" バッファ一覧noremap <Space>b :Unite buffer<CR>" ファイル一覧noremap <Space>f :Unite -buffer-name=file file<CR>" 最近使ったファイルの一覧noremap <Space>m :Unite file_mru<CR>" sourcesを「今開いているファイルのディレクトリ」とする" cnoremap uff :<C-u>UniteWithBufferDir file -buffer-name=file" ウィンドウを分割して開くautocmd FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')autocmd FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')" ウィンドウを縦に分割して開くautocmd FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')autocmd FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')" ESCキーを2回押すと終了するautocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>" 非同期実行NeoBundle 'Shougo/vimproc.vim',{            \ "build": {            \   "windows"   : "mingw32-make -f make_mingw64.mak",            \   "cygwin"    : "make -f make_cygwin.mak",            \   "mac"       : "make -f make_mac.mak",            \   "unix"      : "make -f make_unix.mak",            \ }}NeoBundle 'Shougo/neomru.vim'" neocomplete補完" NeoBundleLazy 'Shougo/neocomplete.vim', {"             \ "autoload": {"insert": 1}}NeoBundle 'Shougo/neocomplete.vim'let g:neocomplete#enable_at_startup = 1let s:hooks = neobundle#get_hooks("neocomplete.vim")function! s:hooks.on_source(bundle)    let g:acp_enableAtStartup = 0    let g:neocomplete#enable_smart_case = 1    let g:neocomplete#sources#syntax#min_keyword_length = 3    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'    " Plugin key-mappings.    inoremap <expr><C-g>     neocomplete#undo_completion()    inoremap <expr><C-l>     neocomplete#complete_common_string()    " Recommended key-mappings.    " <CR>: close popup and save indent.    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>    function! s:my_cr_function()        return pumvisible() ? neocomplete#close_popup() :"\<CR>"    endfunction    " <TAB>: completion.    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<TAB>"    " <C-h>, <BS>: close popup and delete backword char.    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"    inoremap <expr><C-y>  neocomplete#close_popup()    inoremap <expr><C-e>  neocomplete#cancel_popup()    " Close popup by <Space>.    "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"endfunction" autocmd FileType python setlocal omnifunc=python3complete#Complete"クラスや関数名の一覧を表示" NeoBundleLazy 'h1mesuke/unite-outline',{"             \ "autoload": {"             \   "unite_sources": ["outline"],"             \ },"             \ }"スニペット機能NeoBundle 'Shougo/neosnippet.vim'NeoBundle 'Shougo/neosnippet-snippets'imap <C-s> <Plug>(neosnippet_expand_or_jump)smap <C-s> <Plug>(neosnippet_expand_or_jump)"テキストオブジェクト拡張NeoBundle 'tpope/vim-surround'"ファイルエクスプローラーNeoBundleLazy 'Shougo/vimfiler.vim',{            \"depends": ["Shougo/unite.vim"],            \"autoload": {            \"commands": ["VimFilerTab", "VimFiler", "VimFilerExplorer"],            \"mappings": ['<Plug>(vimfiler_switch)'],            \"explorer": 1,}}" Vimfilerの設定nnoremap <silent> <C-\> :<C-u>VimFilerBufferDir -split -simple -winwidth=25 -toggle -no-quit<CR>" 置換機能の拡張NeoBundle 'osyo-manga/vim-over'" over.vimの起動nnoremap  <Leader>/ :OverCommandLine<CR>%s///g<Left><Left><Left>" 選択範囲を置換vnoremap  <Leader>/ :OverCommandLine<CR>s///g<Left><Left><Left>" カーソル下の単語をハイライト付きで置換nnoremap  <Leader>m :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>" コピーした文字列をハイライト付きで置換" nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>" インデントに色を付けて見やすくするNeoBundle 'nathanaelkane/vim-indent-guides'let s:hooks = neobundle#get_hooks("vim-indent-guides")function! s:hooks.on_source(bundle)    " Vim 起動時 vim-indent-guides を自動起動    let g:indent_guides_enable_on_vim_startup=1    " ガイドをスタートするインデントの量    let g:indent_guides_start_level=2    " 自動カラー無効    let g:indent_guides_auto_colors=0    " 奇数番目のインデントの色    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#444433 ctermbg=black    " 偶数番目のインデントの色    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#333344 ctermbg=darkgray    " ガイドの幅    let g:indent_guides_guide_size = 1endfunction" マルチカーソル設定NeoBundle 'terryma/vim-multiple-cursors'" Default mappinglet g:multi_cursor_use_default_mapping=0let g:multi_cursor_next_key='<C-n>'let g:multi_cursor_prev_key='<C-p>'let g:multi_cursor_skip_key='<C-x>'let g:multi_cursor_quit_key='<Esc>'let g:multi_cursor_start_key='<C-n>'let g:multi_cursor_start_word_key='g<C-n>'" Called once right before you start selecting multiple cursorsfunction! Multiple_cursors_before()  if exists(':NeoCompleteLock')==2    exe 'NeoCompleteLock'  endifendfunction" Called once only when the multiple selection is canceled (default <Esc>)function! Multiple_cursors_after()  if exists(':NeoCompleteUnlock')==2    exe 'NeoCompleteUnlock'  endifendfunction"テキスト整形NeoBundle 'vim-scripts/Align'"日本語への対応let g:Align_xstrlen = 3" ヤンク履歴を取得・再利用NeoBundle 'LeafCage/yankround.vim'NeoBundle 'kien/ctrlp.vim'" キーマップnmap p <Plug>(yankround-p)nmap P <Plug>(yankround-P)nmap , <Plug>(yankround-prev)nmap . <Plug>(yankround-next)" 履歴取得数let g:yankround_max_history = 50" 貼り付けた部分をハイライトlet g:yankround_use_region_hl = 1" 履歴一覧(kien/ctrlp.vim)nnoremap <silent><Leader>y :<C-u>CtrlPYankRound<CR>" クリップボード共有set clipboard+=unnamedplus,unnamed"" set clipboard="コメントアウト設定NeoBundle 'tomtom/tcomment_vim'"デフォルトのキーマッピングを無効化let g:tcommentMap = 0" Alt-\でコメントアウトnoremap <silent> <A-\>  :TComment<CR>"let g:tcommentMapLeader1 = '<C-\>'     "     (default: '<c-_>')"let g:tcommentMapLeader2 = '<Leader>\'  "        (default: '<Leader>_')"let g:tcommentMapLeaderOp1 = 'gc'      "  (default: 'gc')"let g:tcommentMapLeaderOp2 = 'gC'      "  (default: 'gC')" "Tagbarの表示" NeoBundleLazy 'majutsushi/tagbar', {"             \ "autoload": {"             \   "commands": ["TagbarToggle"],"             \ }}" nmap <Leader>t :TagbarToggle<CR>" ステータスライン表示強化NeoBundle 'itchyny/lightline.vim'" ブラウザを起動(gsで検索、gxでURLに移動)NeoBundleLazy 'tyru/open-browser.vim',{            \ 'autoload':{            \ 'commands':['OpenBrowser','OpenBrowserSearch','OpenBrowserSmartSearch','<Plug>(openbrowser-smart-search)'],            \ },}let s:hooks = neobundle#get_hooks("open-browser.vim")function! s:hooks.on_source(bundle)    let g:netrw_nogx = 1 " disable netrw's gx mapping.    nnoremap gs :OpenBrowserSmartSearch <C-r><C-w><CR>    vnoremap gs y:OpenBrowserSmartSearch <C-r>"<CR>    nnoremap gx :OpenBrowser <C-r><C-w><CR>    vnoremap gx y:OpenBrowser <C-r>"<CR>endfunctionnnoremap gs :OpenBrowserSmartSearch <C-r><C-w><CR>vnoremap gs y:OpenBrowserSmartSearch <C-r>"<CR>nnoremap gx :OpenBrowser <C-r><C-w><CR>vnoremap gx y:OpenBrowser <C-r>"<CR>" 行末の半角スペースを可視化" NeoBundle 'bronson/vim-trailing-whitespace'" プログラムを簡易実行NeoBundleLazy 'thinca/vim-quickrun',{            \'autoload':{            \   'commands': ['QuickRun']            \ },}"quickrun設定let g:quickrun_no_default_key_mappings = 1nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : '\<C-c>'nnoremap <A-r> :QuickRun<CR>let g:quickrun_config = {            \ '*': {"runner": 'remote/vimproc'},            \ '_' : {            \ 'outputter' : 'multi:buffer:quickfix',            \ 'outputter/buffer/split' : ':botright 60vsp',            \}}"Python編集用"Python用補完NeoBundle 'davidhalter/jedi-vim'" jedi-vim設定let g:jedi#auto_initialization = 0let g:jedi#auto_vim_configuration = 0" nnoremap [jedi] <Nop>" xnoremap [jedi] <Nop>" nmap <Leader>j [jedi]" xmap <Leader>j [jedi]let g:jedi#completions_command = "<C-Space>"    " 補完キーの設定この場合はCtrl+Spacelet g:jedi#goto_assignments_command = "<Leader>g"   " 変数の宣言場所へジャンプ（Ctrl + g)let g:jedi#goto_definitions_command = "<Leader>d"   " クラス、関数定義にジャンプ（Ctrl + d）let g:jedi#documentation_command = "<C-k>"      " Pydocを表示（Ctrl + k）" let g:jedi#rename_command = "[jedi]r"" let g:jedi#usages_command = "[jedi]n"let g:jedi#popup_select_first = 0let g:jedi#popup_on_dot = 0autocmd FileType python setlocal completeopt-=preview" for w/ neocompleteautocmd FileType python setlocal omnifunc=jedi#completionslet g:jedi#completions_enabled = 1let g:jedi#auto_vim_configuration = 0if !exists('g:neocomplete#force_omni_input_patterns')    let g:neocomplete#force_omni_input_patterns = {}endiflet g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'"html編集用"ZenCoding適用NeoBundleLazy 'mattn/emmet-vim', {            \ 'autoload' : {            \   'filetypes' : ['html', 'html5', 'eruby', 'jsp', 'xml', 'css', 'scss', 'coffee'],            \   'commands' : ['<Plug>ZenCodingExpandNormal']            \ },}let g:user_emmet_mode = 'i'let g:user_emmet_leader_key = '<tab>'let g:use_emmet_complete_tag = 1let g:user_emmet_settings = {            \ 'lang' : 'ja',            \ 'html' : {            \   'filters' : 'html',            \ },            \ 'css' : {            \   'filters' : 'fc',            \ },            \ 'php' : {            \   'extends' : 'html',            \   'filters' : ['c','html'],            \ },            \ }augroup EmmitVim    autocmd!    autocmd FileType * let g:user_emmet_settings.indentation = '               '[:&tabstop]augroup ENDaugroup VimCSS3Syntax    autocmd!    autocmd FileType css setlocal iskeyword+=-augroup END" カラースキーム読み込みNeoBundle 'w0ng/vim-hybrid'NeoBundle 'tomasr/molokai'"css3、java-script、coffee-script、html5シンタックス表示NeoBundleLazy 'hail2u/vim-css3-syntax',{            \ "autoload": {            \ "filetypes": ["css"],            \ },            \ }NeoBundleLazy 'jelera/vim-javascript-syntax',{            \ "autoload": {            \ "filetypes": ["js"],            \ },            \ }NeoBundleLazy 'kchmck/vim-coffee-script',{            \ "autoload": {            \ "filetypes": ["coffee"],            \ },            \ }NeoBundleLazy 'othree/html5.vim',{            \ 'autoload':{            \ 'filetypes':['html'],            \},            \}"txtファイル用のsyntax導入NeoBundleLazy 'MU-lab/txt.vim', {             \ "autoload":{             \ "filetypes":["txt","text"],             \ },             \ }autocmd FileType text setl syntax=txt"PHITSのsyntax表示NeoBundle 'JeanMichelBot/phits.vim'" autocmd BufRead,BufNewFile *.inp,*.ou' set filetype=phits"PowerShell編集用NeoBundleLazy 'PProvost/vim-ps1',{            \ 'autoload': {            \ 'filetypes': ['ps1','ps1xml'],            \ },            \}"自動で閉じカッコ挿入NeoBundle 'Townk/vim-autoclose'"NeoBundle設定の終了NeoBundleCheckcall neobundle#end()""""""""""""""""""""""""NeoBundle設定終了""""""""""""""""""""""""""""""""""""""""""filetype plugin indent on       " restore filetype" filetype on" 全角スペースの表示""""""""""""""""""""""""""""""function! ZenkakuSpace()    highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgrayendfunctionif has('syntax')    augroup ZenkakuSpace        autocmd!        autocmd ColorScheme * call ZenkakuSpace()        autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('ZenkakuSpace', '　')    augroup END    call ZenkakuSpace()endifset t_Co=256"colorscheme defaultcolorscheme desert" colorscheme industry" colorscheme elflord" colorscheme wombat" colorscheme rdark""Matlab用の設定"autocmd BufEnter *.m    compiler mlint"autocmd FileType matlab map <buffer> <silent> <F5> :w<CR>:!matlab -nodesktop -nospalsh -r "try, run(which('%')), pause, end, quit" <CR>\\|<ESC><ESC>"autocmd FileType matlab set foldmethod=syntax foldcolumn=2 foldlevel=33"行番号表示set numberset splitbelowset splitright"grep時に自動でquickfixするautocmd QuickFixCmdPost *grep* cwindow"折り返し行中の上下移動有効化nnoremap j gjnnoremap k gknnoremap <Down> gjnnoremap <Up> gk"スクリーンベル無効化set t_vb=set noerrorbellsset visualbell" " Shift + 矢印でウィンドウサイズを変更" nnoremap <S-Left>  <C-w><<CR>" nnoremap <S-Right> <C-w>><CR>" nnoremap <S-Up>    <C-w>-<CR>" nnoremap <S-Down>  <C-w>+<CR>set hlsearch "検索文字列をハイライトするset incsearch "インクリメンタルサーチを行うset ignorecase "大文字と小文字を区別しないset smartcase "大文字と小文字が混在した言葉で検索を行った場合に限り、大文字と小文字を区別するset wrapscan "最後尾まで検索を終えたら次の検索で先頭に移るset showcmd "入力中のコマンドを表示"set gdefault "置換の時 g オプションをデフォルトで有効にするset list "不可視文字を表示set encoding=cp932 " vimの内部文字コードをutf-8に設定set fileencoding=utf-8 " ファイル書き込み時の文字コード(fileencoding)set fileformat=unix " ファイル書き込み時の改行コード(fileformat)set fileencodings=utf-8,utf-16,utf-16le,eucjp,cp932,sjis " 読み込み時の文字コード(fileencodings)"set spell "spell設定set backspace=indent,eol,start " backspaceの有効化" Ctrl + hjkl でウィンドウ間を移動" nnoremap <C-h> <C-w>h" nnoremap <C-j> <C-w>j" nnoremap <C-k> <C-w>k" nnoremap <C-l> <C-w>l"Ctrl + 左右で行頭、行尾へ移動nnoremap <C-Left>  0nnoremap <C-Right> $vnoremap <C-Left>  0vnoremap <C-Right> $"Ctrl + 上下で10行の移動nnoremap <C-Up>  10knnoremap <C-Down> 10jvnoremap <C-Up>  10kvnoremap <C-Down> 10j"Alt + 左右でバッファを移動nnoremap <silent> <A-Left> :bp<CR>nnoremap <silent> <A-Right> :bn<CR>"deleteキーで文字削除noremap  <delete>":<Alt-q>で保存せず終了(:q!)cnoremap <A-q> quit!set expandtab "タブの代わりに空白文字を挿入するset list "タブ文字、行末など不可視文字を表示するset whichwrap=b,s,h,l,<,>,[,] "カーソルを行頭、行末で止まらないようにする" カーソル下の単語を * で検索vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v, '\/'), "\n", '\\n', 'g')<CR><CR>"スワップファイル用のディレクトリset directory=~/vimbackup"undoファイル用のディレクトリset undodir=~/vimbackup"backupを作成しないset nowritebackupset nobackup"undoファイルを作成する(しない:set noundofile)set noundofile" 編集中に他のファイルを開けるset hidden" コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)set wildmenu" ステータスバーを常に表示set laststatus=2" コマンドバーの高さ設定set cmdheight=2"ノーマルモードに入るときに英数入力へ切り替え" set imdisableset iminsert=1set imsearch=-1" <ctrl-a>、<ctrl-x>でインクリメント、デクリメント"vunmap <C-x>vnoremap <C-a> <C-a>gvvnoremap <C-x> <C-x>gv" インデント、インデント解除の設定vnoremap > >gvvnoremap < <gvnnoremap > v>nnoremap < v<"%で対応箇所へ移動source $VIMRUNTIME/macros/matchit.vim" インデント設定(デフォルト)set autoindentset smartindent     " indent whenset tabstop=4       " tab widthset softtabstop=4   " backspaceset shiftwidth=4    " indent widthset expandtab       " expand tab to space" インデント設定(filetype依存)autocmd FileType php setlocal tabstop=2 shiftwidth=2 softtabstop=2autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2autocmd FileType php setlocal tabstop=4 shiftwidth=4 softtabstop=4autocmd FileType coffee,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4autocmd FileType html,htmldjango,xhtml,haml setlocal tabstop=2 shiftwidth=2 softtabstop=2autocmd FileType sass,scss,css setlocal tabstop=2 shiftwidth=2 softtabstop=2autocmd FileType tex,latex setlocal smartindent cinwords=beginautocmd FileType tex,latex setlocal tabstop=2 shiftwidth=2 softtabstop=2" タブ設定" Anywhere SID.function! s:SID_PREFIX()    return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')endfunction" Set tabline.function! s:my_tabline()  "{{{    let s = ''    for i in range(1, tabpagenr('$'))        let bufnrs = tabpagebuflist(i)        let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears        let no = i  " display 0-origin tabpagenr.        let mod = getbufvar(bufnr, '&modified') ? '!' : ' '        let title = fnamemodify(bufname(bufnr), ':t')        let title = '[' . title . ']'        let s .= '%'.i.'T'        let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'        let s .= no . ':' . title        let s .= mod        let s .= '%#TabLineFill# '    endfor    let s .= '%#TabLineFill#%T%=%#TabLine#'    return sendfunction "}}}let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'"set showtabline=2 " 常にタブラインを表示"diff差分表示function! s:vimdiff_in_newtab(...)  if a:0 == 1    exec 'vertical diffsplit ' . a:1  endifendfunctioncommand! -bar -nargs=+ -complete=file Diff  call s:vimdiff_in_newtab(<f-args>)" The prefix key.nnoremap    [Tag]   <Nop>nmap    t [Tag]" Tab jumpfor n in range(1, 9)    execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'endfor" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ" noremap  [Tag]c :tablast <bar> tabnewnoremap  [Tag]c :VimFilerTab<CR>" tc 新しいタブを一番右に作るnoremap <silent> [Tag]x :tabclose<CR>" tx タブを閉じるnoremap <silent> [Tag]n :tabnext<CR>" tn 次のタブnoremap <silent> [Tag]p :tabprevious<CR>" tp 前のタブ
